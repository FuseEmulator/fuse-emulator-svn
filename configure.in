dnl Process this file with autoconf to produce a configure script.
dnl $Id$

dnl This program is free software; you can redistribute it and/or modify
dnl it under the terms of the GNU General Public License as published by
dnl the Free Software Foundation; either version 2 of the License, or
dnl (at your option) any later version.
dnl
dnl This program is distributed in the hope that it will be useful,
dnl but WITHOUT ANY WARRANTY; without even the implied warranty of
dnl MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
dnl GNU General Public License for more details.
dnl
dnl You should have received a copy of the GNU General Public License
dnl along with this program; if not, write to the Free Software
dnl Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA 02111-1307 USA
dnl
dnl Author contact information:
dnl
dnl E-mail: pak21-fuse@srcf.ucam.org
dnl Postal address: 15 Crescent Road, Wokingham, Berks, RG40 2DB, England

AC_INIT(fuse.c)
AM_CONFIG_HEADER(config.h)

dnl Use automake to produce `Makefile.in'
AM_INIT_AUTOMAKE(fuse, 0.3.2.1)

dnl Checks for programs.
AC_PROG_CC
AC_PROG_RANLIB

dnl Check for big endianness
AC_C_BIGENDIAN

dnl Checks for header files.
AC_HEADER_STDC
AC_CHECK_HEADERS(sys/time.h unistd.h sys/soundcard.h)

dnl Checks for typedefs, structures, and compiler characteristics.
AC_C_CONST

dnl Checks for library functions.
AC_CHECK_FUNCS(scandir setitimer)

dnl Check sizes of various types; second parameter is a `default' for
dnl cross-compiling. Will obviously break everything if this is wrong...
AC_CHECK_SIZEOF(char, 1)
AC_CHECK_SIZEOF(short, 2)
AC_CHECK_SIZEOF(int, 4)
AC_CHECK_SIZEOF(long, 4)

dnl Select a user interface

dnl Try various UI options; set the `ui' variable when we've got one
dnl we like, and then don't look at the other options

dnl Look for svgalib (default=no)
AC_MSG_CHECKING(whether svgalib UI requested)
AC_ARG_WITH(svgalib,
[  --with-svgalib          use svgalib for user interface],
if test "$withval" = no; then svgalib=no; else svgalib=yes; fi,
svgalib=no)
AC_MSG_RESULT($svgalib)
if test "$svgalib" = yes; then
  AC_CHECK_HEADER(vga.h,
                  LIBS="$LIBS -lvga"; AC_DEFINE(UI_SVGA) ui=svga,
                  AC_MSG_ERROR([svgalib not found]))
fi

dnl Look for aalib (default=no)
AC_MSG_CHECKING(whether aalib UI requested)
AC_ARG_WITH(aalib,
[  --with-aalib            use aalib for user interface],
if test "$withval" = no; then aalib=no; else aalib=yes; fi,
aalib=no)
AC_MSG_RESULT($aalib)
if test "$aalib" = yes; then
  AC_CHECK_HEADER(aalib.h,
                  LIBS="$LIBS -laa"; AC_DEFINE(UI_AALIB) ui=aalib,
                  AC_MSG_ERROR([aalib not found]))
fi

dnl Look for framebuffer interface for SA1110 (default=no)
if test -z "$ui"; then
  AC_MSG_CHECKING(whether framebuffer UI requested)
  AC_ARG_WITH(fb,
  [  --with-fb               use framebuffer for user interface],
  if test "$withval" = no; then fb=no; else fb=yes; fi,
  fb=no)
  AC_MSG_RESULT($fb)
  if test "$fb" = yes; then AC_DEFINE(UI_FB) ui=fb; fi
fi

dnl Look for GTK+ (default=yes); fall back to Xlib if not found
if test -z "$ui"; then
  AC_MSG_CHECKING(whether GTK UI requested)
  AC_ARG_WITH(gtk,
  [  --without-gtk           don't use GTK+ library for user interface],
  if test "$withval" = no; then gtk=no; else gtk=yes; fi,
  gtk=yes)
  AC_MSG_RESULT($gtk)
  if test "$gtk" = yes; then
    AM_PATH_GTK(1.2.0,
		AC_DEFINE(UI_GTK) AC_DEFINE(HAVE_LIB_GLIB) ui=gtk, 
		AC_MSG_WARN([GTK+ not found. Reverting to Xlib UI]))
  fi
fi

dnl Look for Xlib UI (default=yes)
if test -z "$ui"; then
  if test "$with_x" = no; then
    AC_MSG_ERROR([Please specify --with-svgalib or --with-fb, not --without-x.])
  fi
  AC_PATH_XTRA	
  CFLAGS="$CFLAGS $X_CFLAGS";
  LDFLAGS="$LDFLAGS $X_LIBS";
  LIBS="$LIBS $X_PRE_LIBS -lX11 $X_EXTRA_LIBS";

  dnl This apparently needed for SVR4 systems to link correctly
  dnl Basically the same as a part of AC_PATH_XTRA, but using `gethostname'
  dnl instead of `gethostbyname'.
  dnl Thanks to Erik Kunze for pointing out this problem
  AC_CHECK_FUNC(gethostname)
  if test $ac_cv_func_gethostname = no; then
    AC_CHECK_LIB(nsl, gethostname, X_EXTRA_LIBS="$X_EXTRA_LIBS -lnsl")
  fi
  AC_CHECK_FUNC(connect)
  if test $ac_cv_func_connect = no; then
    AC_CHECK_LIB(socket, connect, X_EXTRA_LIBS="-lsocket $X_EXTRA_LIBS", ,
	         $X_EXTRA_LIBS)
  fi
  AC_DEFINE(UI_X)
  ui=xlib
fi

# If we're not using GTK+, must either find glib or use the replacement
if test "$ui" != gtk; then
  AC_MSG_CHECKING(whether to use glib)
  AC_ARG_WITH(glib,
  [  --without-glib          don't use glib],
  if test "$withval" = no; then glib=no; else glib=yes; fi,
  glib=yes)
  AC_MSG_RESULT($glib)
  if test "$glib" = yes; then
    AM_PATH_GLIB(1.2.0,AC_DEFINE(HAVE_LIB_GLIB),
	         AC_MSG_WARN(glib not found - using internal replacement))
  fi
fi
	       
dnl Do we want the low memory compile?
AC_MSG_CHECKING(whether low memory compile requested)
AC_ARG_ENABLE(smallmem,
[  --enable-smallmem       low memory compile needed],
if test "$enableval" = yes; then
    smallmem=yes;
else
    smallmem=no;
fi,
smallmem=no)
if test "$smallmem" = no; then
    AC_DEFINE(HAVE_ENOUGH_MEMORY)
fi
AC_MSG_RESULT($smallmem)

dnl If it appears we're using gcc as our compiler, turn on warnings
if test "$ac_cv_prog_CC" = gcc; then
    CFLAGS="$CFLAGS -Wall"
fi

AC_OUTPUT(Makefile libspectrum/Makefile roms/Makefile widget/Makefile z80/Makefile)
