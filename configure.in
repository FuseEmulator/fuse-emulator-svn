dnl Process this file with autoconf to produce a configure script.
dnl $Id$

dnl This program is free software; you can redistribute it and/or modify
dnl it under the terms of the GNU General Public License as published by
dnl the Free Software Foundation; either version 2 of the License, or
dnl (at your option) any later version.
dnl
dnl This program is distributed in the hope that it will be useful,
dnl but WITHOUT ANY WARRANTY; without even the implied warranty of
dnl MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
dnl GNU General Public License for more details.
dnl
dnl You should have received a copy of the GNU General Public License
dnl along with this program; if not, write to the Free Software
dnl Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA 02111-1307 USA
dnl
dnl Author contact information:
dnl
dnl E-mail: pak21-fuse@srcf.ucam.org
dnl Postal address: 15 Crescent Road, Wokingham, Berks, RG40 2DB, England

AC_INIT(fuse.c)
AM_CONFIG_HEADER(config.h)

dnl Use automake to produce `Makefile.in'
AM_INIT_AUTOMAKE(fuse, 0.5.1)

dnl Checks for programs.
AC_PROG_CC
AC_PROG_RANLIB
AC_PATH_PROG(PERL, perl)
AC_SUBST(PERL)

dnl Check for big endianness
AC_C_BIGENDIAN

dnl Checks for header files.
AC_HEADER_STDC
AC_CHECK_HEADERS(sys/soundcard.h sys/audioio.h siginfo.h)

dnl Checks for typedefs, structures, and compiler characteristics.
AC_C_CONST

dnl Checks for library functions.
AC_CHECK_FUNCS(getopt_long,,GETOPT_LIBS=getopt/libgetopt.a)
AC_SUBST(GETOPT_LIBS)

dnl Check sizes of various types; second parameter is a `default' for
dnl cross-compiling. Will obviously break everything if this is wrong...
AC_CHECK_SIZEOF(char, 1)
AC_CHECK_SIZEOF(short, 2)
AC_CHECK_SIZEOF(int, 4)
AC_CHECK_SIZEOF(long, 4)

dnl Check that zlib is available
AC_CHECK_LIB(z,zlibVersion)

dnl Allow the user to say that various libraries are in one place
AC_ARG_WITH(local-prefix,
[  --with-local-prefix=PFX local libraries installed in PFX (optional)],
CFLAGS="$CFLAGS -I$withval/include"; LDFLAGS="$LDFLAGS -L$withval/lib",
if test "$prefix" != "NONE"; then
  CFLAGS="$CFLAGS -I$prefix/include"; LDFLAGS="$LDFLAGS -L$prefix/lib"
fi)

dnl Select a user interface

dnl Try various UI options; set the `ui' variable when we've got one
dnl we like, and then don't look at the other options

dnl Look for svgalib (default=no)
AC_MSG_CHECKING(whether svgalib UI requested)
AC_ARG_WITH(svgalib,
[  --with-svgalib          use svgalib for user interface],
if test "$withval" = no; then svgalib=no; else svgalib=yes; fi,
svgalib=no)
AC_MSG_RESULT($svgalib)
if test "$svgalib" = yes; then
  AC_CHECK_HEADER(vga.h,
                  LIBS="$LIBS -lvga"; AC_DEFINE(UI_SVGA) ui=svga,
                  AC_MSG_ERROR([svgalib not found]))
fi

dnl Look for aalib (default=no)
AC_MSG_CHECKING(whether aalib UI requested)
AC_ARG_WITH(aalib,
[  --with-aalib            use aalib for user interface],
if test "$withval" = no; then aalib=no; else aalib=yes; fi,
aalib=no)
AC_MSG_RESULT($aalib)
if test "$aalib" = yes; then
  AC_CHECK_HEADER(aalib.h,
                  LIBS="$LIBS -laa"; AC_DEFINE(UI_AALIB) ui=aalib,
                  AC_MSG_ERROR([aalib not found]))
fi

dnl Look for framebuffer interface for SA1110 (default=no)
if test -z "$ui"; then
  AC_MSG_CHECKING(whether framebuffer UI requested)
  AC_ARG_WITH(fb,
  [  --with-fb               use framebuffer for user interface],
  if test "$withval" = no; then fb=no; else fb=yes; fi,
  fb=no)
  AC_MSG_RESULT($fb)
  if test "$fb" = yes; then AC_DEFINE(UI_FB) ui=fb; fi
fi

dnl Look for SDL (default=no)
if test -z "$ui"; then
  AC_MSG_CHECKING(whether SDL UI requested)
  AC_ARG_WITH(sdl,
  [  --with-sdl              use SDL for user interface],
  if test "$withval" = no; then sdl=no; else sdl=yes; fi,
  sdl=no)
  AC_MSG_RESULT($sdl)
  if test "$sdl" = yes; then
    SDL_VERSION=1.2.4
    AM_PATH_SDL($SDL_VERSION,
		AC_DEFINE(UI_SDL) ui=sdl, 
                AC_MSG_ERROR([SDL version $SDL_VERSION not found]))
    CFLAGS="$CFLAGS $SDL_CFLAGS"
    CXXFLAGS="$CXXFLAGS $SDL_CFLAGS"
    LIBS="$LIBS $SDL_LIBS"
  fi
fi

dnl Look for GTK+ 2.0 (default=no)
if test -z "$ui"; then
  AC_MSG_CHECKING(whether GTK2 UI requested)
  AC_ARG_WITH(gtk2,
  [  --with-gtk2             use GTK+ 2.x library for user interface],
  if test "$withval" = no; then gtk2=no; else gtk2=yes; fi,
  gtk2=no)
  AC_MSG_RESULT($gtk2)
  if test "$gtk2" = yes; then
    AM_PATH_GTK_2_0(2.0.0,
		AC_DEFINE(UI_GTK) AC_DEFINE(HAVE_LIB_GLIB) ui=gtk, 
		AC_MSG_WARN([GTK+ 2.0 not found. Reverting to GTK+ 1.2]))
  fi
fi

dnl Look for GTK+ (default=yes); fall back to Xlib if not found
if test -z "$ui"; then
  AC_MSG_CHECKING(whether GTK UI requested)
  AC_ARG_WITH(gtk,
  [  --without-gtk           don't use GTK+ library for user interface],
  if test "$withval" = no; then gtk=no; else gtk=yes; fi,
  gtk=yes)
  AC_MSG_RESULT($gtk)
  if test "$gtk" = yes; then
    AM_PATH_GTK(1.2.0,
		AC_DEFINE(UI_GTK) AC_DEFINE(HAVE_LIB_GLIB) ui=gtk, 
		AC_MSG_WARN([GTK+ not found. Reverting to Xlib UI]))
  fi
fi

dnl Look for Xlib UI (default=yes)
if test -z "$ui"; then
  if test "$with_x" = no; then
    AC_MSG_ERROR([Please specify --with-svgalib or --with-fb, not --without-x.])
  fi
  AC_PATH_XTRA	
  CFLAGS="$CFLAGS $X_CFLAGS";
  LDFLAGS="$LDFLAGS $X_LIBS";
  LIBS="$LIBS $X_PRE_LIBS -lX11 $X_EXTRA_LIBS";

  dnl This apparently needed for SVR4 systems to link correctly
  dnl Basically the same as a part of AC_PATH_XTRA, but using `gethostname'
  dnl instead of `gethostbyname'.
  dnl Thanks to Erik Kunze for pointing out this problem
  AC_CHECK_FUNC(gethostname)
  if test $ac_cv_func_gethostname = no; then
    AC_CHECK_LIB(nsl, gethostname, X_EXTRA_LIBS="$X_EXTRA_LIBS -lnsl")
  fi
  AC_CHECK_FUNC(connect)
  if test $ac_cv_func_connect = no; then
    AC_CHECK_LIB(socket, connect, X_EXTRA_LIBS="-lsocket $X_EXTRA_LIBS", ,
	         $X_EXTRA_LIBS)
  fi

  dnl Check for the MIT-SHM extension
  AC_CHECK_HEADERS( X11/extensions/XShm.h )
  AC_CHECK_LIB( Xext, XShmAttach, LIBS="$LIBS -lXext" )

  AC_DEFINE(UI_X)
  ui=xlib
fi

# If we're not using GTK+, must either find glib or use the replacement
# (as supplied by libspectrum)
if test "$ui" != gtk; then
  AC_MSG_CHECKING(whether to use glib)
  AC_ARG_WITH(glib,
  [  --without-glib          don't use glib],
  if test "$withval" = no; then glib=no; else glib=yes; fi,
  glib=yes)
  AC_MSG_RESULT($glib)
  if test "$glib" = yes; then
    AM_PATH_GLIB(1.2.0,AC_DEFINE(HAVE_LIB_GLIB),
	         AC_MSG_WARN(glib not found - using libspectrum's replacement))
  fi
fi

dnl Check that libspectrum is available
AC_ARG_WITH(libspectrum-prefix,
[  --with-libspectrum-prefix=PFX where libspectrum is installed (optional)],
LIBSPEC_CFLAGS=-I$withval/include; LIBSPEC_LIBS=-L$withval/lib,
LIBSPEC_CFLAGS=""; LIBSPEC_LIBS="")
ac_save_CPPFLAGS="$CPPFLAGS"
CPPFLAGS="$CFLAGS $LIBSPEC_CFLAGS $GTK_CFLAGS $GLIB_CFLAGS"
AC_CHECK_HEADERS(libspectrum.h,LIBSPEC_LIBS="$LIBSPEC_LIBS -lspectrum",
	         AC_MSG_ERROR(Sorry - I need libspectrum to be available))
CPPFLAGS="$ac_save_CPPFLAGS"
AC_SUBST(LIBSPEC_CFLAGS)
AC_SUBST(LIBSPEC_LIBS)

dnl Do we want +3 disk support?
AC_MSG_CHECKING(whether +3 disk support requested)
AC_ARG_WITH(plus3-disk,
  [  --without-plus3-disk    disable +3 disk support],
  if test "$withval" = no; then plus3disk = no; else plus3disk=yes; fi,
  plus3disk=yes)
AC_MSG_RESULT($plus3disk)
if test "$plus3disk" = yes; then
  AC_ARG_WITH(plus3-disk-prefix,
  [  --with-plus3-disk-prefix=PFX where the +3 libraries are installed (optional)],
  DSK_CFLAGS=-I$withval/include; DSKLIBS=-L$withval/lib,
  DSK_CFLAGS=""; DSK_LIBS="")
  ac_save_CPPFLAGS="$CPPFLAGS"
  CPPFLAGS="$CFLAGS $DSK_CFLAGS"
  AC_CHECK_HEADERS(765.h, DSKLIBS="$DSKLIBS -l765"; lib765=yes,
                   AC_MSG_WARN(765.h not found - disk support disabled))
  if test "$lib765" = yes; then
    AC_CHECK_HEADERS(libdsk.h, DSKLIBS="$DSKLIBS -ldsk")
  fi
  CPPFLAGS="$ac_save_CPPFLAGS"
fi
AC_SUBST(DSK_CFLAGS)
AC_SUBST(DSKLIBS)

dnl Check if libpng is available
AC_CHECK_HEADERS(
  png.h,

  # Check we have a reasonably up to date version of libpng
  AC_MSG_CHECKING(for libpng - version >= 1.0.7)
  AC_TRY_COMPILE(
    [#include <png.h>],
    [
#if PNG_LIBPNG_VER < 10007
#error Old version of libpng detected
#endif
    ],
    AC_MSG_RESULT(yes)
    AC_DEFINE(USE_LIBPNG)
    PNG_LIBS='-lpng -lm',
    AC_MSG_RESULT(no)
    AC_MSG_WARN(Old version of libpng detected - saving screenshots disabled)
  ),
  AC_MSG_WARN(png.h not found - saving screenshots disabled)
)
AC_SUBST(PNG_LIBS)

dnl See if libxml2 is available (for the config file handling)
AM_PATH_XML2(2.0.0,AC_DEFINE(HAVE_LIB_XML2),
  AC_WARN(libxml2 not found - config file use disabled))
	       
dnl Do we want the low memory compile?
AC_MSG_CHECKING(whether low memory compile requested)
AC_ARG_ENABLE(smallmem,
[  --enable-smallmem       low memory compile needed],
if test "$enableval" = yes; then
    smallmem=yes;
else
    smallmem=no;
fi,
smallmem=no)
if test "$smallmem" = no; then
    AC_DEFINE(HAVE_ENOUGH_MEMORY)
fi
AC_MSG_RESULT($smallmem)

dnl Do we want lots of warning messages?
AC_MSG_CHECKING(whether lots of warnings requested)
AC_ARG_ENABLE(warnings,
[  --enable-warnings       give lots of warnings if using gcc],
if test "$enableval" = yes; then
    warnings=yes;
else
    warnings=no;
fi,
warnings=no)
AC_MSG_RESULT($warnings)

dnl If it appears we're using gcc as our compiler, turn on warnings
if test "$ac_cv_prog_gcc" = yes; then
    CFLAGS="$CFLAGS -Wall"
    dnl And possibly lots of warnings
    if test "$warnings" = yes; then
        CFLAGS="$CFLAGS -Wstrict-prototypes -Wmissing-prototypes -Winline -Wshadow -Wpointer-arith -Wcast-qual -Wcast-align -Wwrite-strings -Waggregate-return -W -Wsign-compare"
    fi
fi

AC_OUTPUT(Makefile getopt/Makefile hacking/Makefile lib/Makefile \
man/Makefile perl/Makefile perl/Fuse/Makefile roms/Makefile \
ui/Makefile ui/aalib/Makefile ui/fb/Makefile ui/gtk/Makefile ui/svga/Makefile \
ui/sdl/Makefile \
ui/xlib/Makefile widget/Makefile z80/Makefile)
