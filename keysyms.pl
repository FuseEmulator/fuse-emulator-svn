#!/usr/bin/perl -w

# keysyms.pl: generate keysyms.c from keysyms.dat
# Copyright (c) 2000-2001 Philip Kendall, Matan Ziv-Av, Russell Marks

# $Id$

# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 2 of the License, or
# (at your option) any later version.

# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.

# You should have received a copy of the GNU General Public License
# along with this program; if not, write to the Free Software
# Foundation, Inc., 49 Temple Place, Suite 330, Boston, MA 02111-1307 USA

# Author contact information:

# E-mail: pak21-fuse@srcf.ucam.org
# Postal address: 15 Crescent Road, Wokingham, Berks, RG40 2DB, England

use strict;

use lib '../../perl';

use Fuse;

my $ui = shift;
$ui = 'gtk' unless defined $ui;

die "$0: unrecognised user interface: $ui\n"
  unless 0 < grep { $ui eq $_ } ('gtk', 'x', 'svga', 'fb', 'aa');

# Some keysyms which don't easily do the Xlib -> SVGAlib conversion
my %svga_keysyms = (

    CAPS_LOCK  => 'CAPSLOCK',
    NUMBERSIGN => 'BACKSLASH',	# That's what `#' returns on a UK keyboard!
    RETURN     => 'ENTER',

    LEFT       => 'CURSORBLOCKLEFT',
    DOWN       => 'CURSORBLOCKDOWN',
    UP         => 'CURSORBLOCKUP',
    RIGHT      => 'CURSORBLOCKRIGHT',
);

# Translation table for any UI which uses keyboard mode K_MEDIUMRAW
my @cooked_keysyms = (
    # 0x00
    undef, 'ESCAPE', '1', '2', '3', '4', '5', '6',
    '7', '8', '9', '0', 'MINUS', 'EQUAL', 'BACKSPACE', 'TAB',
    # 0x10
    'Q', 'W', 'E', 'R', 'T', 'Y', 'U', 'I',
    'O', 'P', 'BRACKETLEFT', 'BRACKETRIGHT', 'RETURN', 'CONTROL_L', 'A', 'S',
    # 0x20
    'D', 'F', 'G', 'H', 'J', 'K', 'L', 'SEMICOLON',
    'APOSTROPHE', 'GRAVE', 'SHIFT_L', 'NUMBERSIGN', 'Z', 'X', 'C', 'V',
    # 0x30
    'B', 'N', 'M', 'COMMA', 'PERIOD', 'SLASH', 'SHIFT_R', 'KB_MULTIPLY',
    'ALT_L', 'SPACE', 'CAPS_LOCK', 'F1', 'F2', 'F3', 'F4', 'F5',
    # 0x40
    'F6', 'F7', 'F8', 'F9', 'F10', 'NUM_LOCK', 'SCROLL_LOCK', 'KP_7',
    'KP_8', 'KP_9', 'KP_MINUS', 'KP_4', 'KP_5', 'KP_6', 'KP_PLUS', 'KP_1',
    # 0x50
    'KP_2', 'KP_3', 'KP_0', 'KP_DECIMAL', undef, undef, 'BACKSLASH', 'F11',
    'F12', undef, undef, undef, undef, undef, undef, undef,
    # 0x60
    'KP_ENTER', 'CONTROL_R', 'KP_DIVIDE', 'PRINT', 'ALT_R', undef, 'HOME','UP',
    'PAGE_UP', 'LEFT', 'RIGHT', 'END', 'DOWN', 'PAGE_DOWN', 'INSERT', 'DELETE',
    # 0x70
    undef, undef, undef, undef, undef, undef, undef, 'BREAK',
    undef, undef, undef, undef, undef, 'WIN_L', 'WIN_R', 'MENU'
);

my @keys;
while(<>) {

    next if /^\s*$/;
    next if /^\s*\#/;

    chomp;

    my( $keysym, $key1, $key2 ) = split /\s*,\s*/;

    push @keys, [ $keysym, $key1, $key2 ]

}

my $declare = "const keysyms_key_info keysyms_data[] =\n{";

my $preamble = Fuse::GPL(
    'keysyms.c: keysym to Spectrum key mappings for both Xlib and GDK',
    '2000-2001 Philip Kendall, Matan Ziv-Av, Russell Marks' ) .
    "\n#include <config.h>\n";

my $includes = << 'CODE';

/* This file is autogenerated from keysyms.dat by keysyms.pl.
   Do not edit unless you know what you\'re doing! */

#include <stdlib.h>

#include "keyboard.h"
#include "ui/ui.h"

/* The mappings from keysyms to Spectrum keys. The keysym \`keysym\'
   maps to one or two Spectrum keys, specified by one of the
   keyboard_key_name enum (keyboard.h); unused keys are specified
   by KEYBOARD_NONE.

   These mappings are ordered basically like a standard (English) PC keyboard,
   top to bottom, left to right, but with a few additions for other keys
*/
CODE

if( $ui eq 'gtk' or $ui eq 'x' ) {

    if( $ui eq 'x' ) {
	print << "CODE";
$preamble
#ifdef UI_X
$includes
#include <X11/keysym.h>

#define KEY(keysym) XK_ ## keysym

CODE

    } else {
        print << "CODE";
$preamble
#ifdef UI_GTK
$includes
#include <gdk/gdkkeysyms.h>

#define KEY(keysym) GDK_ ## keysym

CODE
    }

    print $declare, "\n";

    foreach ( @keys ) {
	my( $keysym, $key1, $key2 ) = @$_;

	printf "  { KEY(%-12s , KEYBOARD_%-9s KEYBOARD_%-6s },\n", "$keysym)",
	    "$key1,", $key2;
    }

} elsif( $ui eq 'svga' ) {
  print << "CODE";
$preamble
#ifdef UI_SVGA
$includes
#include <vgakeyboard.h>
$declare
CODE

    foreach( @keys ) {

	my( $keysym, $key1, $key2 ) = @$_;

	# svgalib doesn't believe in these keys
	next if( $keysym =~ /^Super_/ or $keysym =~ /^Hyper_/ );

	# General translations

	$keysym =~ tr/a-z/A-Z/;
	$keysym =~ s/(.*)_L$/LEFT$1/;
	$keysym =~ s/(.*)_R$/RIGHT$1/;
	$keysym =~ s/META$/WIN/;	# Fairly sensible mapping
	$keysym =~ s/^PAGE_/PAGE/;

	# Some specific translations
	$keysym = $svga_keysyms{$keysym} if $svga_keysyms{$keysym};

	# All the magic #defines start with `SCANCODE_'
	$keysym = "SCANCODE_$keysym";
    
	# Apart from this one :-)
	$keysym =~ s/SCANCODE_MODE_SWITCH/127/; # `Menu' key

	if( $keysym =~ /WIN$/ ) {
	    print "#ifdef $keysym\n";
	}

	printf "  { %-25s , KEYBOARD_%-9s KEYBOARD_%-6s },\n", $keysym,
	    "$key1,", $key2;

	if( $keysym =~ /WIN$/ ) {
	    print "#endif                          /* #ifdef $keysym */\n";
	}
    }

} elsif( $ui eq 'fb' ) {
  print << "CODE";
$preamble
#ifdef UI_FB
$includes
$declare
/* These are K_MEDIUMRAW scancodes */

CODE

    foreach (@keys) {

	my ($keysym, $key1, $key2) = @$_;

	# General translations
	$keysym =~ tr/a-z/A-Z/;
	substr( $keysym, 0, 4 ) = 'WIN' if substr( $keysym, 0, 5 ) eq 'META_';
	$keysym = 'MENU' if $keysym eq 'MODE_SWITCH';

	my $i;
	for( $i = 0; $i <= $#cooked_keysyms; $i++) {
	    if( defined $cooked_keysyms[$i] and
		$cooked_keysyms[$i] eq $keysym ) {
		printf "  { %3i, KEYBOARD_%-9s KEYBOARD_%-6s },\n", $i,
		    "$key1,", $key2;
		last;
	    }
	}
    }

} elsif( $ui eq 'aa' ) {
    print << "CODE"
$preamble
#ifdef UI_AALIB
$includes
$declare

  { 0x31                  , KEYBOARD_1,     KEYBOARD_NONE },
  { 0x32                  , KEYBOARD_2,     KEYBOARD_NONE },
  { 0x33                  , KEYBOARD_3,     KEYBOARD_NONE },
  { 0x34                  , KEYBOARD_4,     KEYBOARD_NONE },
  { 0x35                  , KEYBOARD_5,     KEYBOARD_NONE },
  { 0x36                  , KEYBOARD_6,     KEYBOARD_NONE },
  { 0x37                  , KEYBOARD_7,     KEYBOARD_NONE },
  { 0x38                  , KEYBOARD_8,     KEYBOARD_NONE },
  { 0x39                  , KEYBOARD_9,     KEYBOARD_NONE },
  { 0x30                  , KEYBOARD_0,     KEYBOARD_NONE },
CODE
}

print << "CODE"

  { 0, 0, 0 }                   /* End marker: DO NOT MOVE! */

};

#endif
CODE
