#!/usr/bin/perl -w

use strict;

use English;

$INPUT_RECORD_SEPARATOR = "";		# Paragraph mode

print << "CODE";
/* options.c: options dialog boxes
   Copyright (c) 2001-2002 Philip Kendall

   This program is free software; you can redistribute it and/or modify
   it under the terms of the GNU General Public License as published by
   the Free Software Foundation; either version 2 of the License, or
   (at your option) any later version.

   This program is distributed in the hope that it will be useful,
   but WITHOUT ANY WARRANTY; without even the implied warranty of
   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
   GNU General Public License for more details.

   You should have received a copy of the GNU General Public License
   along with this program; if not, write to the Free Software
   Foundation, Inc., 49 Temple Place, Suite 330, Boston, MA 02111-1307 USA

   Author contact information:

   E-mail: pak21-fuse\@srcf.ucam.org
   Postal address: 15 Crescent Road, Wokingham, Berks, RG40 2DB, England

*/

/* This file is autogenerated from options.dat by options.pl.
   Do not edit unless you know what you\'re doing! */

#include <config.h>

#include <gdk/gdkkeysyms.h>
#include <gtk/gtk.h>

#include "fuse.h"
#include "settings.h"
#include "gtkui.h"
CODE

while(<>) {

    my( $type, $title, @widgets ) = split /\n/;

    foreach( @widgets ) {
	my( $widget_type, $text, $value ) = split /\s*,\s*/;
	$_ = { type => $widget_type, text => $text, value => $value };
    }

    print << "CODE";

static void gtkoptions_${type}_done( GtkWidget *widget, gpointer user_data );

void gtkoptions_${type}( GtkWidget *widget, gpointer data )
{
  gtkoptions_${type}_t dialog;
  GtkWidget *ok_button, *cancel_button;
  
  /* Firstly, stop emulation */
  fuse_emulation_pause();

  /* Create the necessary widgets */
  dialog.dialog = gtk_dialog_new();
  gtk_window_set_title( GTK_WINDOW( dialog.dialog ), "$title" );

  /* Create the various widgets */
CODE

    foreach my $widget ( @widgets ) {

	foreach my $type ( $widget->{type} ) {

	    if( $type eq "Checkbox" ) {

		print << "CODE";
  dialog.$widget->{value} =
    gtk_check_button_new_with_label( "$widget->{text}" );
  gtk_toggle_button_set_active( GTK_TOGGLE_BUTTON( dialog.$widget->{value} ),
				settings_current.$widget->{value} );
  gtk_container_add( GTK_CONTAINER( GTK_DIALOG( dialog.dialog )->vbox ),
		     dialog.$widget->{value} );

CODE

	    } elsif( $type eq "Posthook" ) {
		next;			# Do nothing
	    } else {
		warn "Unknown type `$type'\n";
	    }
	}
    }

print << "CODE";
  /* Create the OK and Cancel buttons */
  ok_button = gtk_button_new_with_label( "OK" );
  cancel_button = gtk_button_new_with_label( "Cancel" );

  gtk_container_add( GTK_CONTAINER( GTK_DIALOG( dialog.dialog )->action_area ),
		     ok_button );
  gtk_container_add( GTK_CONTAINER( GTK_DIALOG( dialog.dialog )->action_area ),
		     cancel_button );

  /* Add the necessary callbacks */
  gtk_signal_connect( GTK_OBJECT( ok_button ), "clicked",
		      GTK_SIGNAL_FUNC( gtkoptions_${type}_done ),
		      (gpointer) &dialog );
  gtk_signal_connect_object( GTK_OBJECT( cancel_button ), "clicked",
			     GTK_SIGNAL_FUNC( gtkui_destroy_widget_and_quit ),
			     GTK_OBJECT( dialog.dialog ) );
  gtk_signal_connect( GTK_OBJECT( dialog.dialog ), "delete_event",
		      GTK_SIGNAL_FUNC( gtkui_destroy_widget_and_quit ),
		      (gpointer) NULL );

  /* Allow Esc to cancel */
  gtk_widget_add_accelerator( cancel_button, "clicked",
                              gtk_accel_group_get_default(),
                              GDK_Escape, 0, 0 );

  /* Set the window to be modal and display it */
  gtk_window_set_modal( GTK_WINDOW( dialog.dialog ), TRUE );
  gtk_widget_show_all( dialog.dialog );

  /* Process events until the window is done with */
  gtk_main();

  /* And then carry on with emulation again */
  fuse_emulation_unpause();
}

/* Callbacks used by the Options dialog */
static void gtkoptions_${type}_done( GtkWidget *widget, gpointer user_data )
{
  gtkoptions_${type}_t *ptr = (gtkoptions_${type}_t*)user_data;

CODE

    foreach my $widget ( @widgets ) {

        if( $widget->{type} eq "Checkbox" ) {

            print << "CODE";
  settings_current.$widget->{value} =
    gtk_toggle_button_get_active( GTK_TOGGLE_BUTTON( ptr->$widget->{value} ) );

CODE

        } elsif( $widget->{type} eq "Posthook" ) {
	    print "  $widget->{text}( ptr );\n\n";
        } else {
	    warn "Unknown type `$widget->{type}'";
	}
    }

    print << "CODE";
  gtk_widget_destroy( ptr->dialog );

  gtk_main_quit();
}
CODE

}
