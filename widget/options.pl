#!/usr/bin/perl -w

# options.pl: generate options dialog boxes
# $Id$

# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 2 of the License, or
# (at your option) any later version.

# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.

# You should have received a copy of the GNU General Public License
# along with this program; if not, write to the Free Software
# Foundation, Inc., 49 Temple Place, Suite 330, Boston, MA 02111-1307 USA

# Author contact information:

# E-mail: pak21-fuse@srcf.ucam.org
# Postal address: 15 Crescent Road, Wokingham, Berks, RG40 2DB, England

use strict;

use lib '../perl';

use Fuse;
use Fuse::Dialog;

die "No data file specified" unless @ARGV;

my @dialogs = Fuse::Dialog::read( shift @ARGV );

print Fuse::GPL( 'options.c: options dialog boxes',
		 '2001-2002 Philip Kendall' ) . << "CODE";

/* This file is autogenerated from options.dat by options.pl.
   Do not edit unless you know what you\'re doing! */

#include <config.h>

#include "display.h"
#include "fuse.h"
#include "options.h"
#include "ui/uidisplay.h"
CODE

foreach( @dialogs ) { 

    my $count = @{ $_->{widgets} };

    print << "CODE";
static int widget_$_->{name}_show_all( settings_info *show );

int widget_$_->{name}_draw( void *data GCC_UNUSED )
{
  int error;
  
  /* Get a copy of the current settings */
  error = settings_copy( &widget_options_settings, &settings_current );
  if( error ) return error;

  /* Draw the dialog box */
  widget_dialog_with_border( 1, 2, 30, 2 + $count );
  error = widget_$_->{name}_show_all( &widget_options_settings );
  if( error ) return error;

  uidisplay_lines( DISPLAY_BORDER_HEIGHT + 16,
		   DISPLAY_BORDER_HEIGHT + 32 + $count * 8 );

  return 0;
}

static int widget_$_->{name}_show_all( settings_info *show )
\{
  int error;

CODE

    my $centre = int( 16.5 - (length $_->{title}) / 2 );
    print "  widget_printstring( $centre, 2, WIDGET_COLOUR_FOREGROUND, \"$_->{title}\" );\n\n";

    my $which = 0;
    foreach my $widget ( @{ $_->{widgets} } ) {

	if( $widget->{type} eq "Checkbox" ) {

	    print << "CODE";
  error = widget_options_print_option( $which, "$widget->{text}",
				       show->$widget->{value} );
  if( error ) return error;

CODE
            $which++;
	} else {
	    die "Unknown type `$widget->{type}'";
	}
    }
        
    print << "CODE";
  return 0;
\}

void widget_$_->{name}_keyhandler( keyboard_key_name key )
\{
  int error;

  switch( key ) \{
    
  case KEYBOARD_1: /* 1 used as \`Escape\' generates \`Edit\', which is Caps + 1 */
    widget_return[ widget_level ].finished = WIDGET_FINISHED_CANCEL;
    break;

CODE

    $which = 0;
    foreach my $widget ( @{ $_->{widgets} } ) {

	if( $widget->{type} eq "Checkbox" ) {

	    print << "CODE";
  case $widget->{key}:
    widget_options_settings.$widget->{value} = ! widget_options_settings.$widget->{value};
    error = widget_options_print_value( $which, widget_options_settings.$widget->{value} );
    if( error ) return;
    break;

CODE
           $which++;
	} else {
	    die "Unknown type `$widget->{type}'";
	}
    }

    print << "CODE";
  case KEYBOARD_Enter:
    widget_end_all( WIDGET_FINISHED_OK );
    break;

  default:	/* Keep gcc happy */
    break;

  \}
\}
CODE

}
