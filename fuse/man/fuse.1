.\" -*- nroff -*-
.\"
.\" fuse.1: Fuse man page
.\" Copyright (c) 2001-2003 Russell Marks, Philip Kendall, Darren Salt,
.\"                         Fredrick Meunier
.\"
.\" This program is free software; you can redistribute it and/or modify
.\" it under the terms of the GNU General Public License as published by
.\" the Free Software Foundation; either version 2 of the License, or
.\" (at your option) any later version.
.\"
.\" This program is distributed in the hope that it will be useful,
.\" but WITHOUT ANY WARRANTY; without even the implied warranty of
.\" MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
.\" GNU General Public License for more details.
.\"
.\" You should have received a copy of the GNU General Public License
.\" along with this program; if not, write to the Free Software
.\" Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA 02111-1307 USA
.\"
.\" Author contact information:
.\"
.\" E-mail: pak21-fuse@srcf.ucam.org
.\" Postal address: 15 Crescent Road, Wokingham, Berks, RG40 2DB, England
.\"
.\"
.TH fuse 1 "13th September, 2003" "Version 0.6.1.1" "Emulators"
.\"
.\"------------------------------------------------------------------
.\"
.SH NAME
fuse \- Sinclair ZX Spectrum emulator
.\"
.\"------------------------------------------------------------------
.\"
.SH SYNOPSIS
.\" the trend for long-option-using programs is to give a largely
.\" generic synopsis, so...
.PD 0
.B fuse
.RI [ options ]
.P
.PD 1
.\"
.\"------------------------------------------------------------------
.\"
.SH DESCRIPTION
Fuse is a Sinclair ZX Spectrum emulator. It supports several models
(including the 128), with quite faithful emulation of the display and
sound.
.PP
The emulator can load Z80 and SNA snapshots, and TAP and TZX
virtual-tape files. Saving to both Z80 snapshots and TZX tape files is
supported. The SLT extension to the Z80 format is partly supported
(enough for multi-load games); however, loading of the old DAT-file
variant is not. DSK disk images are supported when emulating a +3.
TRD and SCL disk images are supported when emulating a Pentagon.
.PP
There is also support for reading and writing the RZX input recording
format.
.\"
.\"------------------------------------------------------------------
.\"
.SH OPTIONS
.\" dual short/long option listings here reflect the GNU approach,
.\" as used in info files. It does mean using RS/RE, though,
.\" so this is used for all options (for consistency).
.\"
.\" the options list is in alphabetical order by long option name (or
.\" short option name if none).
.\"
.I --aspect-hint
.RS
Specify whether the GTK+ and Xlib user interfaces should `hint' to the
window manager about the preferred aspect ratio for the top-level
window, thus preventing resizing to non-square sizes which lead to
Fuse not displaying correctly. However, with some window managers (for
example
.IR icewm (1))
this prevents the window from being resized at all. (Enabled by
default, but you can use
.RI ` --no-aspect-hint '
to disable).
.RE
.PP
.I --autosave-settings
.RS
Specify whether Fuse's current settings should be automatically saved
on exit. The same as the General Options dialog's
.I "Auto-save settings"
option.
.RE
.PP
.I --auto-load
.RS
Specify whether tape and disk files should be automatically loaded
when they are opened. (Enabled by default, but you can use
.RI ` --no-auto-load '
to disable). Same as the General Options dialog's
.I "Auto-load tapes/disks"
option.
.RE
.PP
.I --beeper-stereo
.RS
Specify whether fake stereo should be added to the emulation of the
Spectrum beeper. Same as the Sound Option dialog's
.I "Beeper pseudo-stereo"
option.
.RE
.PP
.I --competition-code
.RS
Specify the code to be written to competition mode RZX files. The same
as the RZX Options dialog's
.I "Competition code"
option.
.RE
.PP
.I --competition-mode
.RS
Specify whether input recordings should be made in `competition mode'.
The same as the RZX Options dialog's
.I "Competition mode"
option.
.RE
.PP
.I --compress-rzx
.RS
Specify whether RZX files should be written out compressed. (Enabled
by default, but you can use
.RI ` --no-compress-rzx '
to disable). Same as the RZX Options dialog's
.I "Compress RZX data"
option.
.RE
.PP
.I "-g filter"
.br
.I "--graphics-filter mode"
.RS
Specify which graphics filter to use if available. The default is
.IR normal ,
which uses no filtering. The available options are
.IR half ,
.IR halfskip ,
.IR normal ,
.IR 2x ,
.IR 3x ,
.IR 2xsai ,
.IR super2xsai ,
.IR supereagle ,
.IR advmame2x ,
.IR tv2x ,
.IR timextv ,
and
.IR dotmatrix .
See the
.B "GRAPHICS FILTERS"
section for more details.
.RE
.PP
.I "--graphicsfile file"
.RS
Set the filename used for graphical output from the emulated ZX
printer. See the
.B "PRINTER EMULATION"
section for more details.
.RE
.PP
.I -h
.br
.I --help
.RS
Give brief usage help, listing available options.
.RE
.PP
.I --issue2
.RS
Emulate an issue 2 keyboard. Same as the General Options dialog's
.I "Issue 2 keyboard"
option.
.RE
.PP
.I --kempston
.RS
Emulate a Kempston joystick. Same as the General Options dialog's
.I "Kempston joystick"
option.
.RE
.PP
.I --loading-sound
.RS
Specify whether the sound made while tapes are loading should be
emulated. (Enabled by default, but you can use
.RI ` --no-loading-sound '
to disable). Same as the Sound Option dialog's
.I "Loading sound"
option.
.RE
.PP
.I "-m type"
.br
.I "--machine type"
.RS
Specify machine type to emulate initially. The default is
.IR 48 ,
a 48K Spectrum. The available options are
.IR 16 ,
.IR 48 ,
.IR 128 ,
.IR plus2 ,
.IR plus2a ,
.IR plus3 ,
.IR 2048 ,
.IR 2068 ,
and
.IR pentagon .
.RE
.PP
.I "-p file"
.br
.I "--playback file"
.RS
Specify an RZX file to begin playback from.
.RE
.PP
.I "--plus3disk file"
.RS
Insert the specified file into the emulated +3's A: drive; also select
the +3 on startup if available.
.RE
.PP
.I "--rate frame"
.RS
Specify the frame rate, the ratio of spectrum frame updates to real
frame updates. Same as the General Options dialog's
.I "Frame rate"
option.
.RE
.PP
.I "-r file"
.br
.I "--record file"
.RS
Specify an RZX file to begin recording to.
.RE
.PP
.I --separation
.RS
Give stereo separation of the 128's AY sound channels. Same as the
General Options dialog's
.I "AY stereo separation"
option.
.RE
.PP
.I --slt
.RS
Support the SLT trap instruction. (Enabled by default, but you can use
.RI ` --no-slt '
to disable). Same as the General Options dialog's
.I "Use .slt traps"
option.
.RE
.PP
.I "-s file"
.br
.I "--snapshot file"
.RS
Specify a snapshot file to load. The file must be in Z80,
SNA, or SLT format.
.RE
.PP
.I --sound
.RS
Specify whether Fuse should produce sound. (Enabled by default, but
you can use
.RI ` --no-sound '
to disable). Same as the Sound Option dialog's
.I "Sound enabled"
option.
.RE
.PP
.I "-d device"
.br
.I "--sound-device device"
.RS
Specify the sound output device to use. Generally you shouldn't need
to specify this, but it might be useful if you have more than one.
.RE
.PP
.I "--speed percentage"
.RS
Specify the speed (as a percentage of real Spectrum speed) at which
emulation should attempt to proceed. Same as the General Options
dialog's
.I "Emulation speed"
option.
.RE
.PP
.I "-v mode"
.br
.I "--svgamode mode"
.RS
Specify which mode to use for the SVGAlib UI. Available values for
.I mode
are `320' (which corresponds to a 320x240x256 mode), the default and
`640' (a 640x480x256 mode).
.RE
.PP
.I "-t file"
.br
.I "--tape file"
.RS
Specify a virtual tape file to use. It must be in TAP or TZX format.
.RE
.PP
.I "--textfile file"
.RS
Set the filename used for text output from the emulated printers. See
the
.B "PRINTER EMULATION"
section below for more details.
.RE
.PP
.I --traps
.RS
Support traps for ROM tape loading/saving. (Enabled by default, but
you can use
.RI ` --no-traps '
to disable). Same as the General Options dialog's
.I "Use tape traps"
option.
.RE
.PP
.I "--trdosdisk file"
.RS
Insert the specified file into the emulated TR-DOS drive A: and select
Pentagon mode on startup.
.RE
.PP
.I -V
.br
.I --version
.RS
Show which version of Fuse is being used.
.RE
.PP
.I --writable-roms
.RS
Allow Spectrum programs to overwrite the ROM(s). The same as the
General Options dialog's
.I "Allow writes to ROM"
option.
.RE
.PP
All long options which control on/off settings can be disabled using
.RI ` --no-foo '
(for an option
.RI ` --foo ').
For example, the opposite of
.RI ` --issue2 '
is
.RI ` --no-issue2 '.
These options can also be modified while the emulator is running,
using the options dialogs - see the documentation for the
.I Options
menu in the
.B "MENUS AND KEYS"
section for details.
.\"
.\"------------------------------------------------------------------
.\"
.SH "THE VARIOUS FRONT-ENDS"
Fuse supports various front-ends, or UIs (user interfaces). The usual
one is GTK+-based, but there are also SDL, Xlib, svgalib and
framebuffer ones.
.PP
The important difference to note is that the GTK+ version uses
`native' dialog boxes etc. (behaving like a fairly normal GUI-based
program) while the others use an alternative, Fuse-specific `widget
UI'. This latter front-end is easily spotted by the way it uses the
main Fuse window/screen for menus and dialogs, and uses the Spectrum's
own font.
.\"
.\"------------------------------------------------------------------
.\"
.SH "MENUS AND KEYS"
Since many of the keys available are devoted to emulation of the
Spectrum's keyboard, the primary way of controlling Fuse itself
(rather than the emulated machine) is via the menus. There are also
function key shortcuts for some menu options.
.PP
In the GTK+ version, the menu bar is always visible at the top of the
Fuse window. You can click on a menu name to pop it up. Alternatively,
you can press
.I F1
to display a pop-up version of the menu bar, which you can then
navigate with the cursor keys or mouse.
.PP
In the widget UI pressing
.I F1
is the only way to get the main menu; and unlike the GTK+ version, the
emulator pauses while the menus are being navigated. The menus show
which key to press for each menu option in brackets. Pressing
.I Esc
exits a menu, and pressing
.I Enter
exits the menu system entirely (as well as `confirming' any current
dialog).
.PP
Here's what the menu options do, along with the function key mappings
for those items which have them:
.PP
.\" function keys are listed first, by analogy with short options
.\" being listed the same way.
.\"
.I F3
.br
.I "File, Open..."
.RS
Open a Spectrum file. Snapshots will be loaded into memory; tape
images will be inserted into the emulated tape deck, and if the
.I "Auto-load tapes/disks"
option is set will being loading. Opening a disk image or a Timex dock
image will cause the appropriate machine type (+3, Pentagon or TC2068)
to be selected with the image inserted, and disks will automatically
load if the
.I "Auto-load tapes/disks"
option is set. See the
.B "FILE SELECTION"
section below for details on how to choose the file. Note that this
behaviour is different from previous versions of Fuse, when this
option would open only snapshots.
.RE
.PP
.I F2
.br
.I "File, Save Snapshot..."
.RS
Save a snapshot (machine state, memory contents, etc.) in Z80
format. The GTK+ UI lets you select a filename, but the others just
write the file as
.IR snapshot.z80 ,
and have a differently-named menu item to match.
.RE
.PP
.I "File, Recording, Record..."
.RS
Start recording input to an RZX file. Again, the GTK+ UI lets you
select a filename, while the others just write to
.IR record.rzx
.RE
.PP
.I "File, Recording, Play..."
.RS
Playback recorded input from an RZX file. This lets you replay
keypresses recorded previously. RZX files generally contain a snapshot
with the Spectrum's state at the start of the recording; if the
selected RZX file doesn't, you'll be prompted for a snapshot to load
as well.
.RE
.PP
.I "File, Recording, Stop"
.RS
Stop any currently-recording/playing RZX file.
.RE
.PP
.I "File, AY Logging, Record..."
.RS
Start recording the bytes output via the AY-3-8192 sound chip to a PSG
file. The GTK+ UI lets you choose a filename, whilst the others will
write to
.IR "ay.psg" .
.RE
.PP
.I "File, AY Logging, Stop"
.RS
Stop any current AY logging.
.RE
.PP
.I "File, Open SCR Screenshot..."
.RS
Load an SCR screenshot (essentially just a binary dump of the
Spectrum's video memory) onto the current screen. Fuse supports
screenshots saved in the Timex hi-colour and hi-res modes as well as
`normal' Spectrum screens, and will make a simple conversion if a
hi-colour or hi-res screenshot is loaded onto a non-Timex machine.
.RE
.PP
.I "File, Save Screen as SCR..."
.RS
Save a copy of whatever's currently displayed on the Spectrum's screen
as an SCR file. Once again, the GTK+ UI lets you choose a filename,
while the others will just write to
.IR "fuse.scr" .
.RE
.PP
.I "File, Save Screen as PNG..."
.RS
Save the current screen as a PNG file. The GTK+ UI lets you choose a
filename, while the others will use
.IR "fuse.png" .
.RE
.PP
.I "File, Load Binary Data..."
.RS
Load binary data from a file into the Spectrum's memory. After
selecting the file to load data from, you can choose where to load the
data and how much data to load.
.RE
.PP
.I "File, Save Binary Data..."
.RS
Save an arbitrary chunk of the Spectrum's memory to a file. Select the
file you wish to save to, followed by the location and length of data
you wish to save.
.RE
.PP
.I F10
.br
.I "File, Exit"
.RS
Exit the emulator. If you're using the GTK+ UI, a confirmation dialog
will appear checking you actually want to do this.
.RE
.PP
.I F4
.br
.I "Options, General..."
.RS
Display the General Options dialog, letting you configure Fuse. (With
the widget UI, the keys shown in brackets toggle the options,
.I Enter
confirms any changes, and
.I Esc
aborts). Note that any changed settings only apply to the
currently-running Fuse.
.PP
The options available are:
.PP
.I "Emulation speed"
.RS
Set how fast Fuse will attempt to emulate the Spectrum, as a
percentage of the speed at which the real machine runs. If your
machine isn't fast enough to keep up with the requested speed, Fuse
will just run as fast as it can. Note that if the emulation speed is
not exactly 100%, no sound output will be produced.
.RE
.PP
.I "Frame rate"
.RS
Specify the frame rate, the ratio of spectrum frame updates to real
frame updates. This is useful if your machine is having trouble keeping
up with the spectrum screen updates.
.RE
.PP
.I "Issue 2 keyboard"
.RS
Early versions of the Spectrum used a different value for unused bits
on the keyboard input ports, and a few games depended on the old value
of these bits. Enabling this option switches to the old value, to let
you run them.
.RE
.PP
.I "Kempston joystick"
.RS
There were several types of joystick interface for the Spectrum;
enabling this option lets you use what was probably the most
widely-supported one. When enabled, the joystick uses the keys
.IR q ,
.IR a ,
.IR o ,
.IR p ,
and
.IR Space .
The use of
.I Space
as the fire button can cause problems with some games - since the keys
still form part of the emulated Spectrum's keyboard, and
.I Space
was sometimes used as a second fire button when using the joystick -
so it's probably best to only enable Kempston emulation when you
really need it.
.RE
.PP
.I "Use tape traps"
.RS
Ordinarily, Fuse intercepts calls to the ROM tape-loading routine in
order to load from tape files more quickly when possible. But this can
(rarely) interfere with TZX loading; disabling this option avoids the
problem at the cost of slower (i.e. always real-time) tape-loading.
When tape-loading traps are disabled, you need to start tape playback
manually, by pressing
.I F8
or choosing the
.I "Media, Tape, Play"
menu item.
.RE
.PP
.I "Auto-load tapes/disks"
.RS
On many occasions when you open a tape or disk file, it's because it's
got a program in you want to load and run. If this option is selected,
this will automatically happen for you when you open one of these
files. To use tapes or disks for saving data to, or for loading data
into an already running program, you'll want to turn this option off.
.RE
.PP
.I "Use .slt traps"
.RS
The multi-load aspect of SLT files requires a trap instruction to be
supported. This instruction is not generally used except for this
trap, but since it's not inconceivable that a program could be wanting
to use the real instruction instead, you can choose whether to support
the trap or not.
.RE
.PP
.I "Allow writes to ROM"
.RS
If this option is selected, Fuse will happily allow programs to
overwrite what would normally be ROM. This probably isn't very useful
in most circumstances, especially as the 48K ROM overwrites parts of
itself.
.RE
.PP
.I "Auto-save settings"
.RS
If this option is selected, Fuse will automatically write its
currently selected options to its configuration file on exit (if
.I libxml2
was available when Fuse was compiled). If you turn this option off,
you'll have to manually use
.I "Options, Save"
afterwards to ensure that this setting gets written to Fuse's
configuration file.
.RE
.RE
.PP
.I "Options, Sound..."
.RS
Display the Sound Options dialog, letting you configure Fuse's sound
output. (With the widget UI, the keys shown in brackets toggle the
options,
.I Enter
confirms any changes, and
.I Esc
aborts). Note that any changed settings only apply to the
currently-running Fuse.
.PP
.I "Sound enabled"
.RS
Specify whether sound output should be enabled at all. When this
option is disabled, Fuse will not make any sound.
.RE
.PP
.I "Loading sound"
.RS
Normally, Fuse emulates tape-loading noise when loading from TAPs or
TZXs in real-time, albeit at a deliberately lower volume than on a
real Spectrum. You can disable this option to eliminate the loading
noise entirely.
.RE
.PP
.I "AY stereo separation"
.RS
By default, the sound output is mono, since this is all you got from
an unmodified Spectrum. But enabling this option gives you so-called
ACB stereo (for sound from the 128's AY-3-8912 sound chip). This
actually works a little better than ACB stereo modifications for the
machine itself, since it uses stereo positioning rather than simply
playing on one channel only.
.RE
.PP
.I "Beeper pseudo-stereo"
.RS
The Spectrum beeper is inherently mono, but enabling this option adds
a simple fake-stereo effect. While the slight echo involved can
sometimes make beeper noise sound worse, in many cases it gives an
acceptable result.
.RE
.RE
.PP
.I "Options, RZX"
.RS
Display the RZX Options dialog, letting you configure how Fuse's deals
with RZX input recordings. (With the widget UI, the keys shown in
brackets toggle the options,
.I Enter
confirms any changes, and
.I Esc
aborts). Note that any changed settings only apply to the
currently-running Fuse.
.PP
.I "Compress RZX data"
.RS
If this option is selected, and
.I zlib
was available when Fuse was compiled, any RZX files written by Fuse
will be compressed. This is generally a good thing as it makes the
files significantly smaller, and you probably want to turn it off only
if you're debugging the RZX files or there's some other program which
doesn't support compressed RZX files.
.RE
.PP
.I "Competition mode"
.RS
Any input recordings which are started when this option is selected
will be made in `competition mode'. In essence, this means that Fuse
will act just like a real Spectrum would: you can't load snapshots,
pause the emulation in any way, change the speed or anything that you
couldn't do on the real machine. If any of these things are attempted,
or if the emulated Fuse is running more than 5% faster or slower than
normal Spectrum speed, then the recording will immediately be stopped.
.PP
If
.I libgcrypt
was available when Fuse was compiled, then recordings made with
competition mode active will be digitally signed, in theory to
`certify' that it was made with the above restrictions in place.
\fBHowever, this procedure is not secure (and cannot be made so), so
the presence of any signature on an RZX file should not be taken as
providing proof that it was made with competition mode active.\fR
This feature is included in Fuse solely as it was one of the
requirements for Fuse to be used in an on-line tournament.
.RE
.PP
.I "Competition code"
.RS
The numeric code entered here will be written into any RZX files made
in competition mode. This is another feature for on-line tournaments
which can be used to prove that the recording was made after a
specific code was released. If you're not playing in such a
tournament, you can safely ignore this option.
.RE
.RE
.PP
.I "Options, Save"
.RS
If
.I libxml2
was available when Fuse was compiled, this will cause Fuse's current
options to be written to
.I .fuserc
in your home directory, from which they will be picked up again when
Fuse is restarted. The best way to update this file is by using this
option, but it's a simple XML file and shouldn't be too hard to edit
by hand if you really want to.
.RE
.PP
.I F5
.br
.I "Machine, Reset"
.RS
Reset the emulated Spectrum. Again, you get a chance to cancel this if
you're using the GTK+ UI.
.RE
.PP
.I F9
.br
.I "Machine, Select..."
.RS
Choose a type of Spectrum to emulate. The machine initially emulated
is the 48K Spectrum. The choices available are 16K, 48K, 128K, +2,
+2A, +3, TC2048, TC2068 and Pentagon but most of the time you'll
probably want to use the 48 or 128 machines.
.RE
.PP
.I "Machine, Debugger..."
.RS
Start the monitor/debugger. See the
.B "MONITOR/DEBUGGER"
section for more information.
.RE
.PP
.I "Machine, NMI"
.RS
Sends a non-maskable interrupt to the emulated Spectrum. Due to a typo
in the standard 48K ROM, this will cause a reset, but modified ROMs are 
available which make use of this feature.
.RE
.PP
.I F7
.br
.I "Media, Tape, Open..."
.RS
Choose a TAP or TZX virtual-tape file to load from. See the
.B "FILE SELECTION"
section below for details on how to choose the file. If
.I "Auto-load tapes/disks"
is set in the General Options dialog (as it is by default), the tape
will begin loading. Otherwise, you have to start the load in the
emulated machine (with LOAD "" or the 128's Tape Loader option, though
you may need to reset first).
.PP
To
.I guarantee
that TZX files will load properly, you should select the file, make
sure tape-loading traps are disabled in the General Options dialog,
then press
.I F8
(or do
.IR "Media, Tape, Play" ).
That said, most TZXs will work with tape-loading traps enabled (often
quickly loading partway, then loading the rest real-time), so you
might want to try it that way first.
.RE
.PP
.I F8
.br
.I "Media, Tape, Play"
.RS
Start playing the TAP or TZX file, if required. (Choosing the option
(or pressing
.IR F8 )
again pauses playback, and a further press resumes). To explain - if
tape-loading traps have been disabled (in the General Options dialog),
starting the loading process in the emulated machine isn't enough. You
also have to `press play', so to speak :-), and this is how you do
that. You may also need to `press play' like this in certain other
circumstances, e.g. TZXs containing multi-load games may have a
stop-the-tape request (which Fuse obeys).
.RE
.PP
.I "Media, Tape, Browse"
.RS
Browse through the current tape. A brief display of each of the data
blocks on the current tape will appear, from which you can select
which block Fuse will play next. In the GTK+ UI, select the block with
the mouse and use the
.RI ` OK '
button to exit; in the others, use the cursor keys and press
.IR Enter .
If you decide you don't want to change block, either use the
.RI ` Cancel '
button (in the GTK+ UI) or press
.IR Escape .
.RE
.PP
.I "Media, Tape, Rewind"
.RS
Rewind the current virtual tape, so it can be read again from the
beginning.
.RE
.PP
.I "Media, Tape, Clear"
.RS
Clear the current virtual tape. This is particularly useful when you
want a `clean slate' to add newly-saved files to, before doing
.I "Media, Tape, Write..."
(or
.IR F6 ).
.RE
.PP
.I F6
.br
.I "Media, Tape, Write..."
.RS
Write the current virtual-tape contents to a TZX file. The GTK+ UI
lets you select a filename (see
.B "FILE SELECTION"
below), the others just write the file as
.IR tape.tzx ,
and have a slightly different menu item. The virtual-tape contents are
the contents of the previously-loaded tape (if any has been loaded
since you last did a
.IR "Media, Tape, Clear" ),
followed by anything you've saved from the emulated machine since.
These newly-saved files are
.I not
written to any tape file until you choose this option!
.RE
.PP
.I "Media, Disk"
.RS
Virtual disk images are only accessible when emulating a +3 or
Pentagon. If any of the disk options are selected while emulating a
+3, they refer to the +3's disk drives, which are both of the 3" type
(in effect, the internal drive plus an external FD-1). With the usual
+3 format, these have a capacity of 173K. If any other machine is
being emulated, these options refer to the Pentagon's disk drives,
although these cannot be accessed unless the Pentagon is being
emulated. (See
.B "THE .DSK FORMAT"
,
.B "THE .TRD FORMAT"
and
.B "THE .SCL FORMAT"
sections below for notes on the file formats supported).
.RE
.PP
.I "Media, Disk, Drive A:, Insert"
.RS
Select a disk-image file to read/write in the emulated drive
A:.
.RE
.PP
.I "Media, Disk, Drive A:, Eject"
.RS
Deselect the disk image currently in drive A: - or from the emulated
machine;s perspective, eject it.
.RE
.PP
.I "Media, Disk, Drive B:, Insert"
.RS
As above, but for drive B:.
.RE
.PP
.I "Media, Disk, Drive B:, Eject"
.RS
As above, but for drive B:.
.RE
.PP
.I "Help, Keyboard picture..."
.RS
Display a diagram showing the Spectrum keyboard, and the various
keywords that can be generated with each key from (48K) BASIC. Under
the GTK+ UI, this will appear in a separate window and emulation
continues. With the other UIs, the picture remains onscreen (and the
emulator paused) until you press
.I Esc
or
.IR Enter .
.RE
.PP
.\"
.\"------------------------------------------------------------------
.\"
.SH "KEY MAPPINGS"
When emulating the Spectrum, keys
.I F1
to
.I F10
are used as shortcuts for various menu items, as described above. The
alphanumeric keys (along with
.I Enter
and
.IR Space )
are mapped as-is to the Spectrum keys. The other key mappings are:
.TP
.I Shift
emulated as Caps Shift
.TP
.IR Control ", " Alt ", and " Meta
emulated as Symbol Shift (most other modifiers are also mapped to
this)
.TP
.I Backspace
emulated as Caps-0 (Delete)
.TP
.I Esc
emulated as Caps-1 (Edit)
.TP
.I Caps Lock
emulated as Caps-2
.TP
.I Cursor keys
emulated as Caps-5/6/7/8 (as appropriate)
.PP
Some further punctuation keys are supported, if they exist on your
keyboard -
.RI ` , ',
.RI ` . ',
.RI ` / ',
.RI ` ; ',
.RI ` ' ',
.RI ` # ',
.RI ` - ',
and
.RI ` = '.
These are mapped to the appropriate symbol-shifted keys on the
Spectrum.
.PP
A list of keys applicable when using the file selection dialogs is
given in the
.B "FILE SELECTION"
section below.
.\"
.\"------------------------------------------------------------------
.\"
.SH "DISPLAY SIZE"
Some of Fuse's UIs allow resizing of the emulated Spectrum's display.
For the window-based ones (GTK+ and Xlib), you can resize the window
by, well, resizing it. :-) Exactly how this works depends on your
window manager; you may have to make the window over twice the width
and height of the original size before it actually scales up. Fuse
attempts to keep the window 'square', but with some window managers
this can mean the window will never resize at all. If you experience
this problem, the
.RI ` --no-aspect-hint '
option may help.
.PP
If you're using the SDL UI under X11, the window will automatically
resize to be the correct size for the graphics filter selected.
.\"
.\"------------------------------------------------------------------
.\"
.SH "GRAPHICS FILTERS"
Fuse has the ability to apply essentially arbitrary filters between
building its image of the Spectrum's screen, and displaying it on the
emulating machine's monitor. These filters can be used to do various
forms of smoothing, emulation of TV scanlines and various other
possibilities. Support for graphics filters varies between the
different user interfaces, but there are two general classes: the GTK+
and SDL user interfaces (and the saving of .png screenshots) support
`interpolating' filters which use a palette larger than the Spectrum's
16 colours, while the Xlib and SVGAlib user interfaces support only
`non-interpolating' filters. The framebuffer user interface currently
does not support filters at all.
.PP
A further complication arises due to the fact that the Timex machines
have their high-resolution video mode with twice the horizontal
resolution. To deal with this, Fuse treats these machines as having a
`normal' display size which is twice the size of a normal Spectrum's
screen, leading to a different set of filters being available for
these machines. Note that any of the double-sizing filters are
available for Timex machines only when using the SDL user interface.
.PP
The available filters, along with their short name used to select them
from the command line, are:
.PP
.IR "Timex half (smoothed) " ( half )
.br
.IR "Timex half (skipping) " ( halfskip )
.RS
Two Timex-machine specific filters which scale the screen down to half
normal (Timex) size; that is, the same size as a normal Spectrum
screen. The difference between these two filters is in how they handle
the high-resolution mode: the `smoothed' version is an interpolating
filter which averages pairs of adjacent pixels, while the `skipping'
version is a non-interpolating filter which simply drops every other
pixel.
.RE
.PP
.IR "Normal " ( normal )
.RS
The simplest filter: just display one pixel for every pixel on the
Spectrum's screen.
.RE
.PP
.IR "Double size " ( 2x )
.RS
Scale the displayed screen up to double size.
.RE
.PP
.IR "Triple size " ( 3x )
.RS
Scale the displayed screen up to triple size. Available only with the
SDL user interface or when saving screenshots of non-Timex machines.
.RE
.PP
.IR "2xSaI " ( 2xsai )
.br
.IR "Super 2xSaI " ( super2xsai )
.br
.IR "SuperEagle " ( supereagle )
.RS
Three interpolating filters which apply successively more
smoothing. All three double the size of the displayed screen.
.RE
.PP
.IR "AdvMAME2x " ( advmame2x )
.RS
A double-sizing, non-interpolating filter which attempts to smooth
diagonal lines.
.RE
.PP
.IR "AdvMAME3x " ( advmame3x )
.RS
Very similar to
.IR AdvMAME2x ,
except that it triples the size of the displayed screen. Available
only with the SDL user interface or when saving screenshots of
non-Timex machines.
.RE
.PP
.IR "TV 2x " ( tv2x )
.br
.IR "Timex TV " ( timextv )
.RS
Two filters which attempt to emulate the effect of television
scanlines. The former is a double-sizing filter for non-Timex
machines, while the latter is a single-sizing filter for Timex
machines (note that this means both produce the same size output).
.RE
.PP
.IR "Dot matrix " ( dotmatrix )
.RS
A double-sizing filter which emulates the effect of a dot-matrix
display.
.\"
.\"------------------------------------------------------------------
.\"
.SH "THE EMULATED SPECTRUM"
The emulated Spectrum is, by default, an unmodified 48K Spectrum with
a tape player and ZX Printer attached. Oh, and apparently some magical
snapshot load/save machine which is probably best glossed over for the
sake of the analogy. :-)
.PP
To emulate different kinds of Spectrum, select the
.I "Machine, Select..."
menu option, or press
.IR F9 .
.PP
The Spectrum emulation is paused when any dialogs appear. In the
widget UI, it's also paused when menus or the keyboard picture are
displayed.
.\"
.\"------------------------------------------------------------------
.\"
.SH "PRINTER EMULATION"
The various models of Spectrum supported a range of ways to connect
printers, three of which are supported by Fuse. Different printers are
made available for the different models:
.TP
.IR 16 ", " 48 ", " TC2048 ", " TC2068
ZX Printer
.TP
.IR 128 / +2 / Pentagon
Serial printer (text-only)
.TP
.IR +2A ", " +3
Parallel printer (text-only)
.PP
Any printout is appended to one (or both) of two files, depending on
the printer - these default to
.I printout.txt
for text output, and
.I printout.pbm
for graphics (PBM images are supported by most image viewers and
converters). These names can be changed with the
.I --textfile
and
.I --graphicsfile
options from the command line or configuration file. While the ZX
Printer can
.I only
output graphically, simulated text output is generated at the same
time using a crude sort of OCR based on the current character set (a
bit like using SCREEN$). There is currently no support for graphics
when using the serial/parallel output, though any escape codes used
will be `printed' faithfully. (!)
.PP
By the way, it's not a good idea to modify the
.I printout.pbm
file outside of Fuse if you want to continue appending to it. The
header needs to have a certain layout for Fuse to be able to continue
appending to it correctly, and the file will be overwritten if it
can't be appended to.
.\"
.\"------------------------------------------------------------------
.\"
.SH "FILE SELECTION"
The way you select a file (whether snapshot or tape file) depends on
which UI you're using. So firstly, here's how to use the GTK+ file
selector.
.PP
The selector shows the directories and files in the current directory
in two separate subwindows. If either list is too big to fit in the
window, you can use the scrollbar to see the rest (by dragging the
slider, for example), or you can use
.I Shift-Tab
(to move the keyboard focus to a subwindow) and use the cursor keys.
To change directory, double-click it.
.PP
To choose a file to load you can either double-click it, or click it
then click
.IR Ok .
Or click
.I Cancel
to abort.
.PP
If you're using the keyboard, probably the easiest way to use the
selector is to just ignore it and type in the name. This isn't as
irksome as it sounds, since the filename input box has filename
completion - type part of a directory or file name, then press
.IR Tab .
It should complete it. If it was a directory, it moves to that
directory; if the completion was ambiguous, it completes as much as
possible, and narrows the filenames shown to those which match. You
should press
.I Enter
when you've finished typing the filename, or
.I Esc
to abort.
.PP
Now, if you're using the widget UI - the one using the Spectrum font -
the selector works a bit differently. The files and directories are
all listed in a single two-column-wide window (the directories are
shown at the top, ending in `/') - the names may be truncated onscreen
if they're too long to fit.
.PP
To move the cursor, you can either use the cursor keys, or the
Spectrum equivalents
.\" too many to portably risk using IR...
\fI5\fR/\fI6\fR/\fI7\fR/\fI8\fR, or (similarly)
\fIh\fR/\fIj\fR/\fIk\fR/\fIl\fR. For faster movement, the
.IR "Page Up" ,
.IR "Page Down" ,
.IR Home ,
and
.I End
keys are supported and do what you'd expect. To select a file or
directory, press
.IR Enter .
To abort, press
.IR Esc .
.PP
With both selectors, do bear in mind that
.I all
files are shown, whether Fuse would be able to load them or not.
.\"
.\"------------------------------------------------------------------
.\"
.SH MONITOR/DEBUGGER
.PP
Firstly, note that the vast majority of this section applies only if
you're using the GTK+ user interface; if you're using one of the
widget user interfaces, you'll get a very basic monitor which shows
the current values of the registers and allows you to single step
through execution or continue.
.PP
If you are using the GTK+ user interface, Fuse features a moderately
powerful, completely transparent monitor/debugger, which can be
activated via the
.I "Machine, Debugger ..."
menu option. A debugger window will appear, showing the current state
of the emulated machine: the top-left shows the current state of the
Z80 and the last bytes written to any emulated peripherals. The
bottom-left panel lists any active breakpoints. The centre panel gives
a disassembly, which by default starts at the current program counter,
although this can be modified either by the 'disassemble' command (see
below) or by dragging the scrollbar next to it. Finally, the right
panel shows the current stack. Below the displays are an entry box for
debugger commands, and five buttons for controlling the debugger:
.PP
.I Evaluate
.RS
Evaluate the command currently in the entry box.
.RE
.PP
.I "Single Step"
.RS
Run precisely one Z80 opcode and then stop emulation again.
.RE
.PP
.I Continue
.RS
Restart emulation, but leave the debugger window open. Note that the
debugger window will not be updated while emulation is running.
.RE
.PP
.I Break
.RS
Stop emulation and return to the debugger.
.RE
.PP
.I Close
.RS
Close the debugger window and restart emulation.
.RE
.PP
The main power of the debugger is via the commands entered into the
entry box, which are similar in nature (but definitely not identical
to or as powerful as) to those in
.IR gdb (1).
In general, the debugger is case-insensitive, and numbers will be
interpreted as decimal, unless prefixed by either
.RI ` 0x '
or
.RI ` $ '
when they will be interpreted as hex. Each command can be abbreviated
to the portion not in curly braces.
.PP
ba{se}
.I number
.RS
Change the debugger window to displaying output in base
.IR number .
Available values are 10 (decimal) or 16 (hex).
.RE
.PP
br{eakpoint}
.RI [ address "] [" condition ]
.RS
Set a breakpoint to stop emulation and return to the debugger whenever
an opcode is executed at
.I address
and
.I condition
evaluates true. If
.I address
is omitted, it defaults to the current value of PC.
.RE
.PP
br{eakpoint} p{ort} (r{ead}|w{rite})
.IR "port " [ condition ]
.RS
Set a breakpoint to trigger whenever IO port
.I port
is read from or written to and
.I condition
evaluates true.
.RE
.PP
br{eakpoint} (r{ead}|w{rite})
.RI [ address "] [" condition ]
.RS
Set a breakpoint to trigger whenever memory location
.I address
is read from (other than via an opcode fetch) or written to and
.I condition
evaluates true.
.I Address
again defaults to the current value of PC if omitted.
.RE
.PP
cl{ear}
.RI [ address ]
.RS
Remove all breakpoints at 
.I address
or the current value of PC if
.I address
is omitted. Port read/write breakpoints are unaffected.
.RE
.PP
cond{ition}
.IR "id " [ condition ]
.RS
Set breakpoint
.I id
to trigger only when
.I condition
is true, or unconditionally if
.I condition
is omitted.
.RE
.PP
co{ntinue}
.RS
Equivalent to the
.I Continue
button.
.RE
.PP
del{ete}
.RI [ id ]
.RS
Remove breakpoint
.IR id ,
or all breakpoints if
.I id
is omitted.
.RE
.PP
di{sassemble}
.I address
.RS
Set the centre panel disassembly to begin at
.IR address .
.RE
.PP
fi{nish}
.RS
Exit from the current CALL or equivalent. This isn't infallible: it
works by setting a temporary breakpoint at the current contents of the
stack pointer, so will not function correctly if the code returns to
some other point or plays with its stack in other ways. Also, setting
this breakpoint doesn't disable other breakpoints, which may trigger
before this one. In that case, the temporary breakpoint remains, and
the `continue' command can be used to return to it.
.RE
.PP
i{gnore}
.I id count
.RS
Do not trigger the next
.I count
times that breakpoint
.I id
would have triggered.
.RE
.PP
n{ext}
.RS
Step to the opcode following the current one. As with the `finish'
command, this works by setting a temporary breakpoint at the next
opcode, so is not infalliable.
.RE
.PP
o{ut}
.I port value
.RS
Write
.I value
to IO port
.IR port .
.RE
.PP
se{t}
.I address value
.RS
Poke
.I value
into memory at
.IR address .
.RE
.PP
se{t}
.I register value
.RS
Set the value of the Z80 register
.I register
to
.IR value .
.RE
.PP
s{tep}
.RS
Equivalent to the
.I "Single Step"
button.
.RE
.PP
t{breakpoint}
.RI [ options ]
.RS
This is the same as the `breakpoint' command in its various forms,
except that that breakpoint is temporary: it will trigger once and
once only, and then be removed.
.RE
.PP
Anywhere the debugger is expecting a numeric value, except where it
expects a breakpoint id, you can instead use a numeric expression,
which uses a restricted version of C's syntax; exactly the same syntax
is used for conditional breakpoints, with `0' being false and any
other value being true. In numeric expressions, you can use integer
constants (all calculations is done in integers), register names
(which simply evaluate to the value of the register), parentheses, the
standard four numeric operations (`+', `-', `*' and `/'), the
(non-)equality operators `==' and `!=', the comparision operators `>',
`<', `>=' and `<=', bitwise and (`&'), or (`|') and exclusive or (`^')
and logical and (`&&') and or (`||').
.\"
.\"------------------------------------------------------------------
.\"
.SH THE .DSK FORMAT
.PP
In general, disk images for the +3 Spectrum are thought of as being in
DSK format. However, this is actually an slight oversimplification;
there in in fact
.I two
similar, but not identical, DSK formats. (The difference can be seen
by doing `head -1
.IR dskfile ':
one format will start `MV - CPCEMU' and the other will start
`EXTENDED').
.PP
The `lib765' library used by Fuse to emulate the +3's FDC supports the
`CPCEMU' format, but not the extended format. If the `libdsk' library
was also found while compiling Fuse, this is used to provide support
for the extended format, as well as for other goodies such as gzip
compressed disk images.
.\"
.\"------------------------------------------------------------------
.\"
.SH THE .TRD FORMAT
.PP
Fuse supports .TRD images in its Pentagon emulation; truncated files
need to be expanded with another utility before use.
.\"
.\"------------------------------------------------------------------
.\"
.SH THE .SCL FORMAT
.PP
Fuse has read-only support for .SCL images in its Pentagon emulation,
you can create a read-write .TRD file using 
.I scl2trd 
from the associated Fuse utilities.
.\"
.\"------------------------------------------------------------------
.\"
.SH BUGS
Not many peripherals are supported.
.br
Selecting a startup filter doesn't work properly with user interfaces
other than SDL.
.br
Attempting to replay an RZX file without an embedded snapshot from the
command-line doesn't work if you do `./fuse
.IR "rzxfile snapshot" '.
`./fuse
.IR "snapshot rzxfile" '
does work though, so use that instead.
.\"
.\"------------------------------------------------------------------
.\"
.SH FILES
.I "~/.fuserc"
.\"
.\"------------------------------------------------------------------
.\"
.SH SEE ALSO
.IR listbasic "(1),"
.IR scl2trd "(1),"
.IR tzxconv "(1),"
.IR tzxlist "(1),"
.IR rzxdump "(1),"
.IR rzxtool "(1),"
.IR xspect "(1),"
.IR xzx "(1)"
.PP
The comp.sys.sinclair Spectrum FAQ, at
.br
.IR "http://www.sinclairfaq.com/cssfaq/index.html" .
.\"
.\"------------------------------------------------------------------
.\"
.\" `AUTHOR' here is deliberate; avoiding the plural IMHO makes it
.\" clear that Phil is the main author.
.\"
.SH AUTHOR
Philip Kendall (pak21-fuse@srcf.ucam.org).
.PP
Matan Ziv-Av wrote the svgalib and framebuffer UIs, the glib
replacement code, and did some work on the OSS-specific sound code and
the original widget UI code.
.PP
Russell Marks wrote the sound emulation and OSS-specific sound code,
the joystick emulation, some of the printer code, and the original
version of this man page.
.PP
John Elliott's lib765 library emulates the +3's disk controller chip,
providing Fuse's +3 disk support, and his libdsk library provides
support for more disk image formats.
.PP
Ian Collier wrote the ZX Printer emulation (for xz80).
.PP
Darren Salt wrote the original versions of the code for +3 emulation,
SLT support, MITSHM support (for the Xlib UI), TZX raw data blocks,
and RZX embedded snapshots and compression.
.PP
Alexander Yurchenko wrote the OpenBSD/Solaris-specific sound code.
.PP
Fredrick Meunier wrote the TC2048 support, the Pentagon support and
did the original import of the graphics filter code.
.PP
Ludvig Strigeus and The ScummVM project wrote the original graphics
filter code.
.PP
Dmitry Sanarin wrote the orignial TR-DOS emulation (for Glukalka).
.PP
Witold Filipczyk wrote the TC2068 support.

