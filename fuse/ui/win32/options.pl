#!/usr/bin/perl -w

# options.pl: generate options dialog boxes
# $Id$

# Copyright (c) 2001-2007 Philip Kendall, Marek Januszewski, Stuart Brady

# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 2 of the License, or
# (at your option) any later version.

# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.

# You should have received a copy of the GNU General Public License along
# with this program; if not, write to the Free Software Foundation, Inc.,
# 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.

# Author contact information:

# E-mail: philip-fuse@shadowmagic.org.uk

use strict;

use Fuse;
use Fuse::Dialog;

die "No data file specified" unless @ARGV;

my @dialogs = Fuse::Dialog::read( shift @ARGV );

print Fuse::GPL( 'options.c: options dialog boxes',
		 '2001-2007 Philip Kendall, Marek Januszewski, Stuart Brady' ) . << "CODE";

/* This file is autogenerated from options.dat by options.pl.
   Do not edit unless you know what you\'re doing! */

#include <config.h>

#ifdef UI_WIN32		/* Use this file iff we're using WIN32 */

#include <libspectrum.h>

#include "display.h"
#include "options.h"
#include "periph.h"
#include "settings.h"
#include "win32internals.h"

void win32_options_close( WPARAM wParam );
void win32_options_done( void );

CODE

foreach( @dialogs ) {
    print "static void menu_options_$_->{name}_done( void );";
}

print << "CODE";

BOOL CALLBACK OptionsProc( HWND hWnd, UINT msg,
			   WPARAM wParam, LPARAM lParam )
{
  switch( msg )
  {
    case WM_INITDIALOG:
      /* FIXME: save the handle returned by LoadIcon() in win32ui.c */
      SendMessage( hWnd, WM_SETICON, ICON_SMALL,
	(LPARAM)LoadIcon( fuse_hInstance, "win32_icon" ) );
      return TRUE;
    case WM_COMMAND:
      switch( LOWORD( wParam ) )
      {
	case IDCANCEL:
	  win32_options_done();
	  return TRUE;
CODE

foreach( @dialogs ) {
    my $idcname = uc( "IDC_OPT_$_->{name}" );

    print << "CODE";
	case ${idcname}_OK:
          menu_options_$_->{name}_done();
	  win32_options_done();
	  return TRUE;
	case ${idcname}_CANCEL:
	  win32_options_done();
	  return TRUE;
CODE
}

    print << "CODE";
      }
      return FALSE;
    case WM_CLOSE:
      win32_options_close( wParam );
      return TRUE;
  }
  return FALSE;
}

int
options_create_dialog( int resource )
{

  if (fuse_hOptWnd == NULL)
  {
/* FIXME: use a modal dialog box:
    fuse_hOptWnd = DialogBox( fuse_hInstance, MAKEINTRESOURCE( IDG_OPT ),
			      fuse_hWnd, (DLGPROC) OptionsProc );
 */
    fuse_hOptWnd = CreateDialog( fuse_hInstance, MAKEINTRESOURCE( resource ),
				 fuse_hWnd, (DLGPROC) OptionsProc );
    win32_verror( fuse_hOptWnd == NULL );

    fuse_emulation_pause();
  }
  else
  {
    SetActiveWindow( fuse_hOptWnd );
  }
  return 0;
}

void
win32_options_close( WPARAM wParam )
{
/*
  EndDialog( fuse_hOptWnd, wParam );
*/
  DestroyWindow( fuse_hOptWnd );
  fuse_hOptWnd = NULL;

  fuse_emulation_unpause();
}
CODE

foreach( @dialogs ) {
    my $optname = uc( "OPT_$_->{name}" );

    print << "CODE";

void
menu_options_$_->{name}( int action )
{
  options_create_dialog( IDG_$optname );

CODE

    foreach my $widget ( @{ $_->{widgets} } ) {
	my $type = $widget->{type};

	if( $type eq "Checkbox" ) {
	    my $idcname = uc( "$widget->{value}" );

	    print << "CODE";
  SendDlgItemMessage( fuse_hOptWnd, IDC_${optname}_${idcname}, BM_SETCHECK,
    settings_current.$widget->{value} ? BST_CHECKED : BST_UNCHECKED, 0 );
CODE

	}
    }

print << "CODE";
}

static void
menu_options_$_->{name}_done( void )
{
CODE

    foreach my $widget ( @{ $_->{widgets} } ) {
	my $type = $widget->{type};

	if( $type eq "Checkbox" ) {
	    my $idcname = uc( "$widget->{value}" );

	    print << "CODE";
  settings_current.$widget->{value} =
    IsDlgButtonChecked( fuse_hOptWnd, IDC_${optname}_${idcname} );

CODE
	}
    }

    print "  $_->{posthook}();" if $_->{posthook};

    print << "CODE";
    display_refresh_all();
}
CODE

    }

print << "CODE";

void
win32_options_done( void )
{
  SendMessage( fuse_hOptWnd, WM_CLOSE, (WPARAM) 0, (LPARAM) 0 );
}

#endif			/* #ifdef UI_WIN32 */

CODE
